{"version":3,"sources":["reportWebVitals.js","Component/Square.js","Component/Board.js","Game.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Square","square","onClick","className","isHighLight","value","Board","board","isPlaying","map","boardRow","rowIndex","colIndex","Game","useState","boardSize","setBoardSize","boardSizeInput","setBoardSizeInput","boardInit","i","j","push","stepNumber","xIsNext","lastPosition","row","col","history","setHistory","setIsPlaying","status","setStatus","length","current","setCurrent","isDescending","setIsDescending","manageStatus","currentStep","winner","leftBound","Math","max","rightBound","min","topBound","bottomBound","c","r","countInMainDiag","offsetInMainDiag","countInAuxiliaryDiag","offsetInAuxiliaryDiag","calculateWinter","useEffect","newBoard","newStepInit","onChange","e","target","type","alert","newHistory","slice","currentBoard","JSON","parse","stringify","newStep","concat","handleClick","reverse","step","desc","move","descStep","find","jumpTo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcc409c2.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default function Square({ square, onClick }) {\r\n  return (\r\n    <button className={`square${square.isHighLight ? \" square--highlight\" : \"\"}`} onClick={() => onClick()}>\r\n      {square.value}\r\n    </button>\r\n  );\r\n}","import Square from \"./Square\";\r\n\r\nexport default function Board({ board, isPlaying, onClick }) {\r\n  return (\r\n    <div className={isPlaying ? \"\" : \"board--disable\"}>\r\n      {board?.map((boardRow, rowIndex) => (\r\n        <div key={rowIndex} className=\"board-row\">\r\n          {boardRow.map((square, colIndex) => (\r\n            <Square key={colIndex} square={board[rowIndex][colIndex]} onClick={() => onClick(rowIndex, colIndex)}/>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import \"./Game.css\";\nimport Board from \"./Component/Board\";\nimport { useEffect, useState } from \"react\";\n\nfunction Game() {\n  const [boardSize, setBoardSize] = useState(8);\n  const [boardSizeInput, setBoardSizeInput] = useState(8);\n\n  const boardInit = [];\n  for (let i = 0; i < boardSize; i++) {\n    const boardRow = [];\n    for (let j = 0; j < boardSize; j++) {\n      boardRow.push({ value: null, isHighLight: false });\n    }\n    boardInit.push(boardRow);\n  }\n\n  const [history, setHistory] = useState([{\n    board: boardInit,\n    stepNumber: 0,\n    xIsNext: true,\n    lastPosition: { row: null, col: null }\n  }]);\n\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [status, setStatus] = useState(\"Next player: X\");\n  const [current, setCurrent] = useState(history[history.length - 1]);\n  const [isDescending, setIsDescending] = useState(false);\n\n  const calculateWinter = (currentStep) => {\n    const board = currentStep.board;\n    const { col, row } = currentStep.lastPosition;\n\n    if (col == null || row == null) {\n      return null;\n    }\n\n    const leftBound = Math.max(0, col - 4);\n    const rightBound = Math.min(col, boardSize - 5);\n    const topBound = Math.max(0, row - 4);\n    const bottomBound = Math.min(row, boardSize - 5);\n\n    //check in row\n    for (let c = leftBound; c <= rightBound; c++) {\n      if (board[row][c].value\n          && board[row][c].value === board[row][c + 1].value\n          && board[row][c + 1].value === board[row][c + 2].value\n          && board[row][c + 2].value === board[row][c + 3].value\n          && board[row][c + 3].value === board[row][c + 4].value) {\n        board[row][c].isHighLight = true;\n        board[row][c + 1].isHighLight = true;\n        board[row][c + 2].isHighLight = true;\n        board[row][c + 3].isHighLight = true;\n        board[row][c + 4].isHighLight = true;\n        return board[row][c].value;\n      }\n    }\n\n    //check in column\n    for (let r = topBound; r <= bottomBound; r++) {\n      if (board[r][col].value\n          && board[r][col].value === board[r + 1][col].value\n          && board[r + 1][col].value === board[r + 2][col].value\n          && board[r + 2][col].value === board[r + 3][col].value\n          && board[r + 3][col].value === board[r + 4][col].value) {\n        board[r][col].isHighLight = true;\n        board[r + 1][col].isHighLight = true;\n        board[r + 2][col].isHighLight = true;\n        board[r + 3][col].isHighLight = true;\n        board[r + 4][col].isHighLight = true;\n        return board[r][col].value;\n      }\n    }\n\n    //check in main diagonal line\n    let countInMainDiag = 0;\n    let offsetInMainDiag = -4;\n    for (let i = -4; i <= 4; i++) {\n      if (row + i >= 0 && row + i < boardSize\n          && col + i >= 0 && col + i < boardSize\n          && board[row + i][col + i].value === board[row][col].value) {\n        countInMainDiag++;\n      } else {\n        offsetInMainDiag = i + 1;\n        countInMainDiag = 0;\n      }\n      if (countInMainDiag === 5) {\n        board[row + offsetInMainDiag][col + offsetInMainDiag].isHighLight = true;\n        board[row + offsetInMainDiag + 1][col + offsetInMainDiag + 1].isHighLight = true;\n        board[row + offsetInMainDiag + 2][col + offsetInMainDiag + 2].isHighLight = true;\n        board[row + offsetInMainDiag + 3][col + offsetInMainDiag + 3].isHighLight = true;\n        board[row + offsetInMainDiag + 4][col + offsetInMainDiag + 4].isHighLight = true;\n        return board[row][col].value;\n      }\n    }\n\n    //check in auxiliary diagonal line\n    let countInAuxiliaryDiag = 0;\n    let offsetInAuxiliaryDiag = -4;\n    for (let i = -4; i <= 4; i++) {\n      if (row + i >= 0 && row + i < boardSize\n          && col - i >= 0 && col - i < boardSize\n          && board[row + i][col - i].value === board[row][col].value) {\n        countInAuxiliaryDiag++;\n      } else {\n        offsetInAuxiliaryDiag = i + 1;\n        countInAuxiliaryDiag = 0;\n      }\n      if (countInAuxiliaryDiag === 5) {\n        board[row + offsetInAuxiliaryDiag][col - offsetInAuxiliaryDiag].isHighLight = true;\n        board[row + offsetInAuxiliaryDiag + 1][col - offsetInAuxiliaryDiag - 1].isHighLight = true;\n        board[row + offsetInAuxiliaryDiag + 2][col - offsetInAuxiliaryDiag - 2].isHighLight = true;\n        board[row + offsetInAuxiliaryDiag + 3][col - offsetInAuxiliaryDiag - 3].isHighLight = true;\n        board[row + offsetInAuxiliaryDiag + 4][col - offsetInAuxiliaryDiag - 4].isHighLight = true;\n        return board[row][col].value;\n      }\n    }\n\n    return null;\n  };\n\n  const handleClick = (r, c) => {\n    if (current.board[r][c].value) {\n      return;\n    }\n    const newHistory = history.slice(0, current.stepNumber + 1);\n    const currentBoard = JSON.parse(JSON.stringify(current.board));\n    currentBoard[r][c].value = current.xIsNext ? \"X\" : \"O\";\n    const newStep = {\n      board: currentBoard,\n      stepNumber: current.stepNumber + 1,\n      xIsNext: !current.xIsNext,\n      lastPosition: { row: r, col: c }\n    };\n    manageStatus(newStep);\n    setHistory(newHistory.concat(newStep));\n    setCurrent(newStep);\n  };\n\n  const jumpTo = (move) => {\n    const descStep = { ...history.find((step => step.stepNumber === move)) };\n    setCurrent(descStep);\n    manageStatus(descStep);\n  };\n\n  const manageStatus = (currentStep) => {\n    const winner = calculateWinter(currentStep);\n    if (winner) {\n      setStatus(\"Winner: \" + winner);\n      setIsPlaying(false);\n    } else if (currentStep.stepNumber === boardSize * boardSize) {\n      setStatus(\"Tie\");\n      setIsPlaying(false);\n    } else {\n      setStatus(\"Next player: \" + (currentStep.xIsNext ? \"X\" : \"O\"));\n      setIsPlaying(true);\n    }\n  };\n\n  const moves = () => {\n    const sortedHistory = isDescending ? history.slice().reverse() : history;\n    return sortedHistory.map((step) => {\n      const desc = step.stepNumber ?\n          (`Go to move #${step.stepNumber} ${step.xIsNext ? \"O\" : \"X\"}(${step.lastPosition.col + 1},${step.lastPosition.row + 1})`) :\n          \"Go to game start\";\n      return (\n          <li key={step.stepNumber}>\n            <button className={`move${step.stepNumber === current.stepNumber ? \" move--current\" : \"\"}`}\n                    onClick={() => jumpTo(step.stepNumber)}>\n              {desc}\n            </button>\n          </li>\n      );\n    });\n  };\n\n  const handleChangeBoardSize = () => {\n    if (boardSizeInput >= 5) {\n      setBoardSize(boardSizeInput);\n    } else {\n      alert(\"Board size minimum is 5\");\n      setBoardSizeInput(boardSize);\n    }\n  };\n\n  useEffect(() => {\n    const newBoard = [];\n    for (let i = 0; i < boardSize; i++) {\n      const boardRow = [];\n      for (let j = 0; j < boardSize; j++) {\n        boardRow.push({ value: null, isHighLight: false });\n      }\n      newBoard.push(boardRow);\n    }\n    const newStepInit = {\n      board: newBoard,\n      stepNumber: 0,\n      xIsNext: true,\n      lastPosition: { row: null, col: null }\n    };\n    setHistory([newStepInit]);\n    setCurrent(newStepInit);\n    manageStatus(newStepInit);\n  }, [boardSize]);\n\n  return (\n      <>\n        <div className=\"game-size-input\">\n          <p className=\"game-size-input__label\">Enter board size: </p>\n          <input className=\"game-size-input__input\" value={boardSizeInput}\n                 onChange={(e) => setBoardSizeInput(e.target.value)}/>\n          <button type=\"button\" onClick={handleChangeBoardSize}>Reset\n          </button>\n        </div>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board board={current.board} onClick={(r, c) => handleClick(r, c)} isPlaying={isPlaying}/>\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <div className=\"sort\">\n              <label className=\"switch\">\n                <input type=\"checkbox\" onChange={() => setIsDescending(!isDescending)}/>\n                <span className=\"slider round\"/>\n              </label>\n              <p className=\"sort-label\">Sort descending</p>\n            </div>\n            <ol>{moves()}</ol>\n          </div>\n        </div>\n      </>\n  );\n}\n\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Game from \"./Game\";\n\nReactDOM.render(\n    <React.StrictMode>\n      <Game/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}